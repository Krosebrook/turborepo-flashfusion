name: FlashFusion CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}

jobs:
  validate-environment:
    name: 🔍 Validate Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Validate required environment variables
        run: |
          required_vars=("NODE_VERSION")
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "::error::Missing required environment variable: $var"
              exit 1
            fi
          done
          echo "✅ All required environment variables are set"

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

  install-dependencies:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    needs: validate-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Clear and reinstall dependencies on failure
        if: failure()
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install

  lint-and-format:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format -- --check

      - name: Auto-fix linting issues
        if: failure()
        run: |
          npm run lint -- --fix
          npm run format
          echo "::warning::Auto-fixed linting and formatting issues"

  type-check:
    name: 🔧 Type Check
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: install-dependencies
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with retry logic
        run: |
          # Retry flaky tests up to 3 times
          if ! npm test; then
            echo "::warning::First test run failed, retrying..."
            if ! npm test -- --maxWorkers=1 --runInBand; then
              echo "::warning::Second test run failed, final retry..."
              npm test -- --maxWorkers=1 --runInBand
            fi
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/

  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist/
            apps/*/.next/
            packages/*/dist/

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level high
          if [ $? -ne 0 ]; then
            echo "::warning::Security vulnerabilities found. Please review and update dependencies."
          fi

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add actual deployment commands here

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to production
        run: |
          echo "🌟 Deploying to production environment..."
          # Add actual deployment commands here

  notify-on-failure:
    name: 📢 Notify on Failure
    runs-on: ubuntu-latest
    needs: [validate-environment, install-dependencies, lint-and-format, type-check, test, build, security-scan]
    if: failure()
    steps:
      - name: Notify GitHub Actions agent
        run: |
          echo "::error::CI/CD pipeline failed. GitHub Actions agent should analyze and provide auto-remediation suggestions."
          echo "::notice::Use the github_actions_agent role in FlashFusion orchestrator for automated troubleshooting."