name: Deploy to Environments

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - preview
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-images:
    name: Build Container Images
    runs-on: ubuntu-latest
    outputs:
      image-web: ${{ steps.meta-web.outputs.tags }}
      image-api: ${{ steps.meta-api.outputs.tags }}
      digest-web: ${{ steps.build-web.outputs.digest }}
      digest-api: ${{ steps.build-api.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Web image
        id: build-web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push API image
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  security-scan:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Run Trivy vulnerability scanner (Web)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.image-web }}
          format: 'sarif'
          output: 'trivy-web-results.sarif'

      - name: Run Trivy vulnerability scanner (API)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.image-api }}
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-web-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-api-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.flashfusion.dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create deployment manifests
        run: |
          cat > k8s-staging.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: flashfusion-web-staging
            namespace: staging
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: flashfusion-web
                env: staging
            template:
              metadata:
                labels:
                  app: flashfusion-web
                  env: staging
              spec:
                containers:
                - name: web
                  image: ${{ needs.build-images.outputs.image-web }}
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: ANTHROPIC_API_KEY
                    valueFrom:
                      secretKeyRef:
                        name: flashfusion-secrets
                        key: anthropic-api-key
                  resources:
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: flashfusion-api-staging
            namespace: staging
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: flashfusion-api
                env: staging
            template:
              metadata:
                labels:
                  app: flashfusion-api
                  env: staging
              spec:
                containers:
                - name: api
                  image: ${{ needs.build-images.outputs.image-api }}
                  ports:
                  - containerPort: 8080
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: PORT
                    value: "8080"
                  - name: ANTHROPIC_API_KEY
                    valueFrom:
                      secretKeyRef:
                        name: flashfusion-secrets
                        key: anthropic-api-key
                  resources:
                    limits:
                      memory: "1Gi"
                      cpu: "1000m"
                    requests:
                      memory: "512Mi"
                      cpu: "500m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: flashfusion-web-service
            namespace: staging
          spec:
            selector:
              app: flashfusion-web
              env: staging
            ports:
            - port: 80
              targetPort: 3000
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: flashfusion-api-service
            namespace: staging
          spec:
            selector:
              app: flashfusion-api
              env: staging
            ports:
            - port: 80
              targetPort: 8080
          EOF

      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f k8s-staging.yaml
          kubectl rollout status deployment/flashfusion-web-staging -n staging --timeout=300s
          kubectl rollout status deployment/flashfusion-api-staging -n staging --timeout=300s

      - name: Run health checks
        run: |
          echo "Running post-deployment health checks..."
          sleep 30
          curl -f https://staging.flashfusion.dev/api/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://flashfusion.dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Blue-Green Deployment Strategy
        run: |
          export KUBECONFIG=kubeconfig
          
          # Create green deployment
          cat > k8s-production-green.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: flashfusion-web-green
            namespace: production
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: flashfusion-web
                slot: green
            template:
              metadata:
                labels:
                  app: flashfusion-web
                  slot: green
              spec:
                containers:
                - name: web
                  image: ${{ needs.build-images.outputs.image-web }}
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NODE_ENV
                    value: "production"
                  resources:
                    limits:
                      memory: "1Gi"
                      cpu: "1000m"
                    requests:
                      memory: "512Mi"
                      cpu: "500m"
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: flashfusion-api-green
            namespace: production
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: flashfusion-api
                slot: green
            template:
              metadata:
                labels:
                  app: flashfusion-api
                  slot: green
              spec:
                containers:
                - name: api
                  image: ${{ needs.build-images.outputs.image-api }}
                  ports:
                  - containerPort: 8080
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: PORT
                    value: "8080"
                  resources:
                    limits:
                      memory: "2Gi"
                      cpu: "2000m"
                    requests:
                      memory: "1Gi"
                      cpu: "1000m"
          EOF
          
          # Deploy green version
          kubectl apply -f k8s-production-green.yaml
          kubectl rollout status deployment/flashfusion-web-green -n production --timeout=600s
          kubectl rollout status deployment/flashfusion-api-green -n production --timeout=600s

      - name: Health check green deployment
        run: |
          export KUBECONFIG=kubeconfig
          
          # Get green pod IP and test
          GREEN_WEB_IP=$(kubectl get pods -n production -l app=flashfusion-web,slot=green -o jsonpath='{.items[0].status.podIP}')
          GREEN_API_IP=$(kubectl get pods -n production -l app=flashfusion-api,slot=green -o jsonpath='{.items[0].status.podIP}')
          
          # Test green deployment
          kubectl run health-check --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f http://$GREEN_WEB_IP:3000/api/health
          
          kubectl run health-check --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f http://$GREEN_API_IP:8080/health

      - name: Switch traffic to green
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update service selectors to point to green
          kubectl patch service flashfusion-web-service -n production -p '{"spec":{"selector":{"slot":"green"}}}'
          kubectl patch service flashfusion-api-service -n production -p '{"spec":{"selector":{"slot":"green"}}}'
          
          echo "Traffic switched to green deployment"

      - name: Final health check
        run: |
          sleep 30
          curl -f https://flashfusion.dev/api/health || exit 1

      - name: Cleanup old blue deployment
        run: |
          export KUBECONFIG=kubeconfig
          
          # Scale down and delete blue deployments
          kubectl scale deployment flashfusion-web-blue -n production --replicas=0 || true
          kubectl scale deployment flashfusion-api-blue -n production --replicas=0 || true
          
          sleep 30
          
          kubectl delete deployment flashfusion-web-blue -n production || true
          kubectl delete deployment flashfusion-api-blue -n production || true
          
          # Rename green to blue for next deployment
          kubectl patch deployment flashfusion-web-green -n production -p '{"metadata":{"name":"flashfusion-web-blue"}}'
          kubectl patch deployment flashfusion-api-green -n production -p '{"metadata":{"name":"flashfusion-api-blue"}}'

  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'preview')
    environment:
      name: preview-${{ github.event.number || github.run_number }}
      url: https://preview-${{ github.event.number || github.run_number }}.flashfusion.dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy preview with Docker Compose
        run: |
          # Create preview environment
          export PREVIEW_ID=${{ github.event.number || github.run_number }}
          export WEB_IMAGE=${{ needs.build-images.outputs.image-web }}
          export API_IMAGE=${{ needs.build-images.outputs.image-api }}
          
          cat > docker-compose.preview.yml << EOF
          version: '3.8'
          services:
            web:
              image: ${WEB_IMAGE}
              ports:
                - "300${PREVIEW_ID}:3000"
              environment:
                - NODE_ENV=production
                - PREVIEW_MODE=true
            api:
              image: ${API_IMAGE}
              ports:
                - "808${PREVIEW_ID}:8080"
              environment:
                - NODE_ENV=production
                - PREVIEW_MODE=true
          EOF
          
          echo "Preview environment created at ports 300${PREVIEW_ID} and 808${PREVIEW_ID}"

  notification:
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, deploy-preview]
    if: always()
    steps:
      - name: Send Slack notification
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ FlashFusion deployment completed successfully!"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send failure notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ FlashFusion deployment failed! Check GitHub Actions for details."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}