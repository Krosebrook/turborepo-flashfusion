import { useState, useRef, useEffect } from 'react';
import { 
  Sparkles, Paperclip, Zap, Users, Settings, BarChart3, 
  Play, FolderOpen, Monitor, Smartphone, Code, Terminal,
  GitBranch, Cloud, Activity, AlertCircle, CheckCircle
} from 'lucide-react';
import Editor from '@monaco-editor/react';
import toast, { Toaster } from 'react-hot-toast';

const FusionDashboard = () => {
  const [promptInput, setPromptInput] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState('Business App');
  const [selectedModel, setSelectedModel] = useState('Claude Sonnet 4');
  const [showTemplateDropdown, setShowTemplateDropdown] = useState(false);
  const [showModelDropdown, setShowModelDropdown] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [previewDevice, setPreviewDevice] = useState('desktop');
  const [chatMessages, setChatMessages] = useState([]);
  const [projectStatus, setProjectStatus] = useState('ready');
  const [currentFile, setCurrentFile] = useState('app.js');
  const [editorValue, setEditorValue] = useState(`// Generated by FlashFusion AI
import React from 'react';
import { useState } from 'react';

function App() {
  const [count, setCount] = useState(0);

  return (
    <div className="app">
      <h1>FlashFusion App</h1>
      <button onClick={() => setCount(count + 1)}>
        Count: {count}
      </button>
    </div>
  );
}

export default App;`);

  const editorRef = useRef(null);

  // File system simulation
  const [files, setFiles] = useState({
    'app.js': {
      content: editorValue,
      language: 'javascript'
    },
    'components.js': {
      content: `// FlashFusion Components
import React from 'react';

export const Button = ({ onClick, children }) => (
  <button 
    onClick={onClick}
    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
  >
    {children}
  </button>
);

export const Card = ({ title, children }) => (
  <div className="bg-white shadow rounded-lg p-6">
    <h3 className="text-lg font-semibold mb-4">{title}</h3>
    {children}
  </div>
);`,
      language: 'javascript'
    },
    'styles.css': {
      content: `/* FlashFusion Styles */
.app {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  font-family: system-ui, sans-serif;
}

.app h1 {
  color: #333;
  text-align: center;
  margin-bottom: 30px;
}

button {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  transition: transform 0.2s;
}

button:hover {
  transform: translateY(-2px);
}`,
      language: 'css'
    }
  });

  const templates = [
    { name: 'Business App', desc: 'Full-stack business automation', icon: '🏢' },
    { name: 'E-commerce', desc: 'Online store with payments', icon: '🛒' },
    { name: 'SaaS Platform', desc: 'Subscription-based service', icon: '💼' },
    { name: 'AI Assistant', desc: 'Custom AI-powered chatbot', icon: '🤖' },
    { name: 'Analytics Dashboard', desc: 'Data visualization platform', icon: '📊' },
    { name: 'Next.js App', desc: 'Modern React application', icon: '⚛️' }
  ];

  const models = [
    'Claude Sonnet 4',
    'GPT-4 Turbo', 
    'Gemini Pro',
    'Multi-Agent Orchestration'
  ];

  const projects = [
    { 
      id: 1, 
      name: 'E-commerce Platform', 
      status: 'Active', 
      agents: 5, 
      lastUpdate: '2 min ago',
      preview: '/api/placeholder/preview1',
      framework: 'Next.js'
    },
    { 
      id: 2, 
      name: 'Customer Support AI', 
      status: 'Building', 
      agents: 3, 
      lastUpdate: '5 min ago',
      preview: '/api/placeholder/preview2',
      framework: 'React'
    },
    { 
      id: 3, 
      name: 'Analytics Dashboard', 
      status: 'Deployed', 
      agents: 4, 
      lastUpdate: '1 hour ago',
      preview: '/api/placeholder/preview3',
      framework: 'Vue.js'
    }
  ];

  const handlePromptSubmit = async () => {
    if (!promptInput.trim() || isGenerating) return;
    
    setIsGenerating(true);
    setProjectStatus('generating');
    
    // Add user message to chat
    setChatMessages(prev => [...prev, {
      type: 'user',
      content: promptInput,
      timestamp: new Date()
    }]);

    toast.loading('Creating project...', { id: 'project-creation' });

    // Simulate AI response
    setTimeout(() => {
      setChatMessages(prev => [...prev, {
        type: 'assistant',
        content: `🚀 Creating your ${selectedTemplate} with ${selectedModel}! Setting up project structure and deploying agents...`,
        timestamp: new Date()
      }]);
      setProjectStatus('building');
      setIsGenerating(false);
      setActiveTab('editor');
      toast.success('Project created successfully!', { id: 'project-creation' });
    }, 2000);
  };

  // File operations
  const handleFileSelect = (fileName) => {
    setCurrentFile(fileName);
    setEditorValue(files[fileName].content);
  };

  const handleEditorChange = (value) => {
    setEditorValue(value || '');
    setFiles(prev => ({
      ...prev,
      [currentFile]: {
        ...prev[currentFile],
        content: value || ''
      }
    }));
  };

  const handleRunCode = () => {
    toast.success('Code executed successfully!');
    setChatMessages(prev => [...prev, {
      type: 'assistant',
      content: '✅ Code compiled and running on preview server',
      timestamp: new Date()
    }]);
  };

  const handleSendChat = (message) => {
    if (!message.trim()) return;
    
    setChatMessages(prev => [...prev, {
      type: 'user',
      content: message,
      timestamp: new Date()
    }]);

    // Simulate AI response
    setTimeout(() => {
      setChatMessages(prev => [...prev, {
        type: 'assistant',
        content: 'I can help you with that! Let me analyze your code and suggest improvements...',
        timestamp: new Date()
      }]);
    }, 1000);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handlePromptSubmit();
    }
  };

  const StatusIndicator = ({ status }) => (
    <div className={`flex items-center gap-2 text-sm ${
      status === 'Active' ? 'text-green-400' :
      status === 'Building' ? 'text-yellow-400' :
      'text-blue-400'
    }`}>
      {status === 'Active' ? <CheckCircle className="w-4 h-4" /> :
       status === 'Building' ? <AlertCircle className="w-4 h-4 animate-pulse" /> :
       <CheckCircle className="w-4 h-4" />}
      {status}
    </div>
  );

  return (
    <div className="min-h-screen bg-black text-white overflow-hidden">
      {/* Background Effects */}
      <div className="fixed inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20" />
      <div className="fixed inset-0 bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-purple-900/20 via-black to-transparent" />
      
      {/* Main Container */}
      <div className="relative z-10 flex flex-col h-screen">
        {/* Header */}
        <header className="flex items-center justify-between p-4 backdrop-blur-xl bg-white/5 border-b border-white/10">
          <div className="flex items-center gap-4">
            <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center">
              <Zap className="w-5 h-5 text-white" />
            </div>
            <h1 className="text-xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              FlashFusion December
            </h1>
            
            {/* Tab Navigation */}
            <nav className="flex items-center gap-2 ml-8">
              {[
                { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
                { id: 'editor', label: 'Editor', icon: Code },
                { id: 'preview', label: 'Preview', icon: Monitor }
              ].map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all ${
                    activeTab === tab.id 
                      ? 'bg-white/20 text-white' 
                      : 'text-gray-400 hover:text-white hover:bg-white/10'
                  }`}
                >
                  <tab.icon className="w-4 h-4" />
                  {tab.label}
                </button>
              ))}
            </nav>
          </div>
          
          <div className="flex items-center gap-4">
            <StatusIndicator status={projectStatus} />
            <button className="px-4 py-2 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg transition-all">
              Deploy
            </button>
          </div>
        </header>

        {/* Main Content */}
        <div className="flex-1 flex">
          {/* Dashboard Tab */}
          {activeTab === 'dashboard' && (
            <div className="flex-1 p-6 overflow-auto">
              {/* Hero Prompt Section */}
              <div className="max-w-4xl mx-auto mb-12">
                <div className="text-center mb-8">
                  <h1 className="text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-white via-purple-200 to-blue-200 bg-clip-text text-transparent">
                    What do you want to build?
                  </h1>
                  <p className="text-xl text-gray-400 max-w-3xl mx-auto">
                    Create full-stack applications from simple prompts. FlashFusion's AI agents work together to build, deploy, and manage your projects.
                  </p>
                </div>

                {/* Prompt Interface */}
                <div className="relative">
                  <div className="bg-gray-900/30 border border-gray-700/30 rounded-2xl shadow-[0_8px_32px_rgba(0,0,0,0.12)] backdrop-blur-xl bg-gradient-to-br from-white/[0.08] to-white/[0.02] focus-within:border-purple-500/60 transition-all duration-300">
                    <div className="p-4">
                      <textarea
                        value={promptInput}
                        onChange={(e) => setPromptInput(e.target.value)}
                        onKeyDown={handleKeyDown}
                        placeholder="Build a full-stack e-commerce platform with user authentication, product catalog, shopping cart, and Stripe payments..."
                        className="w-full bg-transparent text-white placeholder-gray-400 resize-none outline-none"
                        style={{
                          minHeight: '80px',
                          maxHeight: '200px',
                          height: 'auto'
                        }}
                        disabled={isGenerating}
                      />
                      
                      {/* Controls */}
                      <div className="flex items-center justify-between mt-4">
                        <div className="flex items-center gap-3">
                          {/* Template Selector */}
                          <div className="relative">
                            <button
                              onClick={() => {
                                setShowTemplateDropdown(!showTemplateDropdown);
                                setShowModelDropdown(false);
                              }}
                              className="flex items-center gap-2 px-3 py-2 bg-gray-800/40 hover:bg-gray-700/40 border border-gray-600/30 rounded-lg text-sm text-gray-300 hover:text-white transition-all backdrop-blur-sm"
                            >
                              <Sparkles className="w-4 h-4 text-purple-400" />
                              <span>{selectedTemplate}</span>
                              <svg width="12" height="12" viewBox="0 0 16 16" className={`transition-transform ${showTemplateDropdown ? 'rotate-180' : ''}`}>
                                <path fillRule="evenodd" d="M12.0607 6.74999L8.7071 10.1035C8.31657 10.4941 7.68341 10.4941 7.29288 10.1035L4.46966 7.28032L3.93933 6.74999L4.99999 5.68933L7.99999 8.68933L11 5.68933L12.0607 6.74999Z" fill="currentColor"/>
                              </svg>
                            </button>
                            
                            {showTemplateDropdown && (
                              <div className="absolute top-full left-0 mt-2 w-72 bg-gray-900/90 backdrop-blur-xl border border-gray-600/30 rounded-lg shadow-xl z-50">
                                {templates.map((template) => (
                                  <button
                                    key={template.name}
                                    onClick={() => {
                                      setSelectedTemplate(template.name);
                                      setShowTemplateDropdown(false);
                                    }}
                                    className="w-full text-left p-4 text-sm text-gray-300 hover:text-white hover:bg-white/10 first:rounded-t-lg last:rounded-b-lg transition-all flex items-center gap-3"
                                  >
                                    <span className="text-lg">{template.icon}</span>
                                    <div>
                                      <div className="font-medium">{template.name}</div>
                                      <div className="text-xs text-gray-500">{template.desc}</div>
                                    </div>
                                  </button>
                                ))}
                              </div>
                            )}
                          </div>

                          {/* Model Selector */}
                          <div className="relative">
                            <button
                              onClick={() => {
                                setShowModelDropdown(!showModelDropdown);
                                setShowTemplateDropdown(false);
                              }}
                              className="flex items-center gap-2 px-3 py-2 bg-gray-800/40 hover:bg-gray-700/40 border border-gray-600/30 rounded-lg text-sm text-gray-300 hover:text-white transition-all backdrop-blur-sm"
                            >
                              <span>{selectedModel}</span>
                              <svg width="12" height="12" viewBox="0 0 16 16" className={`transition-transform ${showModelDropdown ? 'rotate-180' : ''}`}>
                                <path fillRule="evenodd" d="M12.0607 6.74999L8.7071 10.1035C8.31657 10.4941 7.68341 10.4941 7.29288 10.1035L4.46966 7.28032L3.93933 6.74999L4.99999 5.68933L7.99999 8.68933L11 5.68933L12.0607 6.74999Z" fill="currentColor"/>
                              </svg>
                            </button>
                            
                            {showModelDropdown && (
                              <div className="absolute top-full left-0 mt-2 w-48 bg-gray-900/90 backdrop-blur-xl border border-gray-600/30 rounded-lg shadow-xl z-50">
                                {models.map((model) => (
                                  <button
                                    key={model}
                                    onClick={() => {
                                      setSelectedModel(model);
                                      setShowModelDropdown(false);
                                    }}
                                    className="w-full text-left px-4 py-3 text-sm text-gray-300 hover:text-white hover:bg-white/10 first:rounded-t-lg last:rounded-b-lg transition-all"
                                  >
                                    {model}
                                  </button>
                                ))}
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Action Buttons */}
                        <div className="flex items-center gap-2">
                          <button className="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-all">
                            <Sparkles className="w-4 h-4" />
                          </button>
                          <button className="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-all">
                            <Paperclip className="w-4 h-4" />
                          </button>
                          <button
                            onClick={handlePromptSubmit}
                            disabled={!promptInput.trim() || isGenerating}
                            className="flex items-center justify-center w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 disabled:from-gray-600 disabled:to-gray-700 text-white rounded-lg transition-all duration-300 shadow-lg hover:shadow-xl disabled:cursor-not-allowed"
                          >
                            {isGenerating ? (
                              <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                            ) : (
                              <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M8.70711 1.39644C8.31659 1.00592 7.68342 1.00592 7.2929 1.39644L2.21968 6.46966L1.68935 6.99999L2.75001 8.06065L3.28034 7.53032L7.25001 3.56065V14.25V15H8.75001V14.25V3.56065L12.7197 7.53032L13.25 8.06065L14.3107 6.99999L13.7803 6.46966L8.70711 1.39644Z" />
                              </svg>
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Projects Grid */}
              <div className="max-w-6xl mx-auto">
                <div className="flex items-center justify-between mb-8">
                  <div>
                    <h2 className="text-3xl font-bold text-white mb-2">Your Projects</h2>
                    <p className="text-gray-400">Manage and monitor your AI-generated applications</p>
                  </div>
                  <button className="px-6 py-3 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white rounded-lg transition-all shadow-lg hover:shadow-xl">
                    New Project
                  </button>
                </div>

                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {projects.map((project) => (
                    <div key={project.id} className="group cursor-pointer">
                      <div className="h-full bg-gray-900/20 border border-gray-700/30 rounded-xl backdrop-blur-sm hover:bg-gray-800/30 hover:border-gray-600/50 transition-all duration-300 overflow-hidden">
                        {/* Project Preview */}
                        <div className="h-32 bg-gradient-to-br from-purple-500/10 to-blue-500/10 border-b border-gray-700/30 flex items-center justify-center">
                          <Monitor className="w-8 h-8 text-gray-400" />
                        </div>
                        
                        {/* Project Info */}
                        <div className="p-6">
                          <div className="flex items-center justify-between mb-4">
                            <h3 className="text-lg font-semibold text-white">{project.name}</h3>
                            <StatusIndicator status={project.status} />
                          </div>
                          
                          <div className="flex items-center justify-between text-sm text-gray-400 mb-4">
                            <span>{project.framework}</span>
                            <span>{project.lastUpdate}</span>
                          </div>
                          
                          <div className="flex items-center gap-2">
                            <div className="flex -space-x-2">
                              {[...Array(project.agents)].map((_, i) => (
                                <div key={i} className="w-6 h-6 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full border-2 border-gray-900" />
                              ))}
                            </div>
                            <span className="text-xs text-gray-500 ml-2">{project.agents} agents</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Editor Tab */}
          {activeTab === 'editor' && (
            <div className="flex-1 flex">
              {/* Left Sidebar - File Tree */}
              <div className="w-64 bg-gray-900/20 border-r border-gray-700/30 backdrop-blur-sm">
                <div className="p-4 border-b border-gray-700/30">
                  <h3 className="text-sm font-semibold text-white mb-3">Project Files</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex items-center gap-2 text-gray-300 hover:text-white cursor-pointer">
                      <FolderOpen className="w-4 h-4" />
                      <span>src/</span>
                    </div>
                    {Object.keys(files).map((fileName) => (
                      <div 
                        key={fileName}
                        onClick={() => handleFileSelect(fileName)}
                        className={`flex items-center gap-2 cursor-pointer ml-4 p-1 rounded transition-all ${
                          currentFile === fileName 
                            ? 'text-white bg-purple-500/20' 
                            : 'text-gray-300 hover:text-white hover:bg-white/10'
                        }`}
                      >
                        <Code className="w-4 h-4" />
                        <span>{fileName}</span>
                      </div>
                    ))}
                  </div>
                </div>
                
                {/* Agent Status */}
                <div className="p-4">
                  <h3 className="text-sm font-semibold text-white mb-3">Active Agents</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                      <span className="text-gray-300">Code Generator</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                      <span className="text-gray-300">UI Designer</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                      <span className="text-gray-300">API Builder</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Main Editor Area */}
              <div className="flex-1 flex flex-col">
                {/* File Tabs */}
                <div className="flex items-center gap-2 p-2 bg-gray-900/20 border-b border-gray-700/30">
                  {Object.keys(files).map((fileName) => (
                    <button
                      key={fileName}
                      onClick={() => handleFileSelect(fileName)}
                      className={`px-4 py-2 text-sm rounded-lg transition-all ${
                        currentFile === fileName
                          ? 'bg-gray-800/40 border border-gray-600/30 text-white'
                          : 'text-gray-400 hover:text-white hover:bg-white/10'
                      }`}
                    >
                      {fileName}
                    </button>
                  ))}
                  <button 
                    onClick={handleRunCode}
                    className="ml-auto px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white rounded-lg transition-all text-sm flex items-center gap-2"
                  >
                    <Play className="w-4 h-4" />
                    Run
                  </button>
                </div>

                {/* Real Monaco Editor */}
                <div className="flex-1">
                  <Editor
                    height="100%"
                    language={files[currentFile]?.language || 'javascript'}
                    value={editorValue}
                    onChange={handleEditorChange}
                    theme="vs-dark"
                    options={{
                      minimap: { enabled: false },
                      fontSize: 14,
                      lineNumbers: 'on',
                      automaticLayout: true,
                      scrollBeyondLastLine: false,
                      wordWrap: 'on',
                      tabSize: 2,
                      bracketPairColorization: true,
                      guides: {
                        bracketPairs: true
                      }
                    }}
                    onMount={(editor, monaco) => {
                      editorRef.current = editor;
                      // Set up dark theme
                      monaco.editor.defineTheme('fusion-dark', {
                        base: 'vs-dark',
                        inherit: true,
                        rules: [
                          { token: 'comment', foreground: '6a9955', fontStyle: 'italic' },
                          { token: 'keyword', foreground: '569cd6' },
                          { token: 'string', foreground: 'ce9178' },
                          { token: 'number', foreground: 'b5cea8' }
                        ],
                        colors: {
                          'editor.background': '#0f0f0f',
                          'editor.foreground': '#d4d4d4'
                        }
                      });
                      monaco.editor.setTheme('fusion-dark');
                    }}
                  />
                </div>

                {/* Bottom Terminal */}
                <div className="h-32 bg-black/50 border-t border-gray-700/30 p-4 font-mono text-sm">
                  <div className="flex items-center gap-2 mb-2">
                    <Terminal className="w-4 h-4 text-gray-400" />
                    <span className="text-gray-400">Terminal</span>
                  </div>
                  <div className="text-green-400">$ npm run dev</div>
                  <div className="text-gray-300">✓ Ready on http://localhost:3000</div>
                  <div className="text-blue-400">⚡ Building...</div>
                </div>
              </div>

              {/* Right Panel - Chat */}
              <div className="w-80 bg-gray-900/20 border-l border-gray-700/30 backdrop-blur-sm flex flex-col">
                <div className="p-4 border-b border-gray-700/30">
                  <h3 className="text-sm font-semibold text-white">AI Assistant</h3>
                </div>
                
                <div className="flex-1 p-4 overflow-auto">
                  <div className="space-y-4">
                    {chatMessages.map((message, index) => (
                      <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                        <div className={`max-w-xs p-3 rounded-lg text-sm ${
                          message.type === 'user' 
                            ? 'bg-blue-500 text-white' 
                            : 'bg-gray-800 text-gray-200'
                        }`}>
                          {message.content}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="p-4 border-t border-gray-700/30">
                  <ChatInput onSend={handleSendChat} />
                </div>
              </div>
            </div>
          )}

          {/* Preview Tab */}
          {activeTab === 'preview' && (
            <div className="flex-1 flex flex-col">
              {/* Preview Controls */}
              <div className="flex items-center justify-between p-4 bg-gray-900/20 border-b border-gray-700/30">
                <div className="flex items-center gap-4">
                  <h3 className="text-sm font-semibold text-white">Live Preview</h3>
                  <div className="flex items-center gap-2 bg-gray-800/40 rounded-lg p-1">
                    <button
                      onClick={() => setPreviewDevice('desktop')}
                      className={`p-2 rounded transition-all ${
                        previewDevice === 'desktop' ? 'bg-white/20 text-white' : 'text-gray-400 hover:text-white'
                      }`}
                    >
                      <Monitor className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => setPreviewDevice('mobile')}
                      className={`p-2 rounded transition-all ${
                        previewDevice === 'mobile' ? 'bg-white/20 text-white' : 'text-gray-400 hover:text-white'
                      }`}
                    >
                      <Smartphone className="w-4 h-4" />
                    </button>
                  </div>
                </div>
                
                <div className="flex items-center gap-2">
                  <button className="px-4 py-2 bg-gray-800/40 hover:bg-gray-700/40 border border-gray-600/30 rounded-lg text-sm text-gray-300 hover:text-white transition-all">
                    Refresh
                  </button>
                  <button className="px-4 py-2 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white rounded-lg transition-all text-sm">
                    Open in New Tab
                  </button>
                </div>
              </div>

              {/* Preview Frame */}
              <div className="flex-1 p-6 bg-gray-900/10">
                <div className={`mx-auto bg-white rounded-lg shadow-2xl overflow-hidden transition-all duration-300 ${
                  previewDevice === 'mobile' ? 'w-80 h-[600px]' : 'w-full h-full'
                }`}>
                  <div className="h-full flex items-center justify-center bg-gradient-to-br from-purple-50 to-blue-50">
                    <div className="text-center">
                      <div className="w-16 h-16 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
                        <Zap className="w-8 h-8 text-white" />
                      </div>
                      <h3 className="text-xl font-bold text-gray-800 mb-2">Your App Preview</h3>
                      <p className="text-gray-600">Live preview will appear here as you build</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Dropdown Overlay */}
        {(showTemplateDropdown || showModelDropdown) && (
          <div 
            className="fixed inset-0 z-40" 
            onClick={() => {
              setShowTemplateDropdown(false);
              setShowModelDropdown(false);
            }} 
          />
        )}
      </div>

      <Toaster 
        position="top-right"
        toastOptions={{
          style: {
            background: '#1f2937',
            color: '#fff',
            border: '1px solid rgba(255, 255, 255, 0.1)',
          },
        }}
      />
    </div>
  );
};

// Chat Input Component
const ChatInput = ({ onSend }) => {
  const [message, setMessage] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (message.trim()) {
      onSend(message);
      setMessage('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex gap-2">
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        placeholder="Ask AI for help..."
        className="flex-1 px-3 py-2 bg-gray-800/40 border border-gray-600/30 rounded-lg text-white placeholder-gray-400 text-sm focus:outline-none focus:border-purple-500/60"
      />
      <button 
        type="submit"
        className="px-3 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-all"
      >
        <Play className="w-4 h-4" />
      </button>
    </form>
  );
};

export default FusionDashboard;